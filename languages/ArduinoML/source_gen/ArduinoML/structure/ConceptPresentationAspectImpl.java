package ArduinoML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Action = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionActuator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionLCD = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Actuator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_App = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Brick = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LCD = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Output = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputSensor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputSerial = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Sensor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transition = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Action;
      case 1:
        return props_ActionActuator;
      case 2:
        return props_ActionLCD;
      case 3:
        return props_Actuator;
      case 4:
        return props_App;
      case 5:
        return props_Brick;
      case 6:
        return props_LCD;
      case 7:
        return props_Output;
      case 8:
        return props_OutputSensor;
      case 9:
        return props_OutputSerial;
      case 10:
        return props_Sensor;
      case 11:
        return props_State;
      case 12:
        return props_Transition;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
